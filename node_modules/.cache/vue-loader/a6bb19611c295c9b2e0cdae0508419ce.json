{"remainingRequest":"D:\\Program\\caption\\captionr-static-web-app-main (1)\\captionr-static-web-app-main\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Program\\caption\\captionr-static-web-app-main (1)\\captionr-static-web-app-main\\frontend\\src\\views\\CaptionJoin.vue?vue&type=style&index=0&id=c677f034&scoped=true&lang=css&","dependencies":[{"path":"D:\\Program\\caption\\captionr-static-web-app-main (1)\\captionr-static-web-app-main\\frontend\\src\\views\\CaptionJoin.vue","mtime":1606393365000},{"path":"D:\\Program\\caption\\captionr-static-web-app-main (1)\\captionr-static-web-app-main\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Program\\caption\\captionr-static-web-app-main (1)\\captionr-static-web-app-main\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Program\\caption\\captionr-static-web-app-main (1)\\captionr-static-web-app-main\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Program\\caption\\captionr-static-web-app-main (1)\\captionr-static-web-app-main\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Program\\caption\\captionr-static-web-app-main (1)\\captionr-static-web-app-main\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNsYW5ndWFnZS1zZWxlY3QgewogIHBvc2l0aW9uOiBmaXhlZDsKICB0b3A6IDA7CiAgd2lkdGg6IDEwMCU7CiAgcGFkZGluZy10b3A6IDEyMHB4OwogIHBhZGRpbmctYm90dG9tOiA2cHg7CiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7Cn0KCiNjYXB0aW9ucy10ZXh0IHsKICBwYWRkaW5nLXRvcDogMTQwcHg7CiAgcGFkZGluZy1ib3R0b206IDYwcHgKfQo="},{"version":3,"sources":["CaptionJoin.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"CaptionJoin.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"caption-join\">\n    <div v-if=\"!joined\">\n      <div><input type=\"password\" v-model=\"meetingPassword\" placeholder=\"Meeting Password\" /></div>\n      <button @click=\"join\">Join</button>\n    </div>\n    <div v-else>\n      <div id=\"language-select\">\n        <select v-model=\"toLanguageCode\">\n          <option v-for=\"lang in toLanguageCodes\" :value=\"lang\" :key=\"lang\">\n            {{ lang }}\n          </option>\n        </select>\n      </div>\n      <div id=\"captions-text\" class=\"caption\">\n        <div v-for=\"caption in captions\" :key=\"caption.offset\">{{ caption.text }}</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport axios from 'axios'\nimport constants from '../lib/constants'\nimport * as signalR from '@microsoft/signalr'\nimport languageListMixin from '../lib/language-list-mixin'\n\nexport default {\n  mixins: [ languageListMixin ],\n  props: {\n    clientId: String\n  },\n  data() {\n    return {\n      code: '',\n      captions: [],\n      captionsMap: {},\n      toLanguageCode: 'en',\n      meetingId: null,\n      meetingPassword: null,\n      joined: false\n    }\n  },\n  computed: {\n    toLanguageCodes() {\n      return this.toLanguages.map(l => l.substring(0, 2)).sort()\n    }\n  },\n  methods: {\n    async join() {\n      this.connection = new signalR.HubConnectionBuilder()\n        .withUrl(`${constants.apiBaseUrl}/api/${this.clientId}/${this.meetingId}/${this.meetingPassword}`)\n        .withAutomaticReconnect()\n        .build()\n\n      this.connection.on('newCaption', onNewCaption.bind(this))\n\n      try {\n        await this.connection.start()\n      } catch (e) {\n        alert('Connection failed. Verify the meeting id and password and try again.')\n      }\n\n      console.log('connection started')\n      this.joined = true\n      await this.updateLanguageSubscription(this.toLanguageCode)\n\n      function onNewCaption(caption) {\n        let localCaption = this.captionsMap[caption.offset]\n        if (!localCaption) {\n          localCaption = this.captionsMap[caption.offset] = {\n            offset: caption.offset,\n            text: ''\n          }\n          this.captions.push(localCaption)\n        }\n        localCaption.text = caption.text\n\n        Vue.nextTick(function() {\n          window.scrollTo(0, document.body.scrollHeight || document.documentElement.scrollHeight)\n        })\n      }\n    },\n    async updateLanguageSubscription(languageCode) {        \n      await axios.post(`${constants.apiBaseUrl}/api/selectlanguage?meetingId=${this.meetingId}`, {\n        languageCode,\n        userId: this.clientId\n      })\n    }\n  },\n  watch: {\n    toLanguageCode: {\n      handler() {\n        return this.updateLanguageSubscription(this.toLanguageCode)\n      },\n      immediate: true\n    }\n  },\n  mounted() {\n    this.meetingId = this.$route.params.meetingId\n  },\n  async beforeDestroy() {\n    if (this.connection) {\n      await Promise.all([\n        this.connection.stop(),\n        this.updateLanguageSubscription(null)\n      ])\n      console.log('connection stopped')\n    }\n  }\n}\n</script>\n\n<style scoped>\n#language-select {\n  position: fixed;\n  top: 0;\n  width: 100%;\n  padding-top: 120px;\n  padding-bottom: 6px;\n  background-color: white;\n}\n\n#captions-text {\n  padding-top: 140px;\n  padding-bottom: 60px\n}\n</style>\n"]}]}